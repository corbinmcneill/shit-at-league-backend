# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.game import Game  # noqa: F401,E501
from swagger_server import util


class Player(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, region: str=None, games: List[Game]=None):  # noqa: E501
        """Player - a model defined in Swagger

        :param name: The name of this Player.  # noqa: E501
        :type name: str
        :param region: The region of this Player.  # noqa: E501
        :type region: str
        :param games: The games of this Player.  # noqa: E501
        :type games: List[Game]
        """
        self.swagger_types = {
            'name': str,
            'region': str,
            'games': List[Game]
        }

        self.attribute_map = {
            'name': 'name',
            'region': 'region',
            'games': 'games'
        }
        self._name = name
        self._region = region
        self._games = games

    @classmethod
    def from_dict(cls, dikt) -> 'Player':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Player of this Player.  # noqa: E501
        :rtype: Player
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Player.


        :return: The name of this Player.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Player.


        :param name: The name of this Player.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def region(self) -> str:
        """Gets the region of this Player.


        :return: The region of this Player.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: str):
        """Sets the region of this Player.


        :param region: The region of this Player.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def games(self) -> List[Game]:
        """Gets the games of this Player.


        :return: The games of this Player.
        :rtype: List[Game]
        """
        return self._games

    @games.setter
    def games(self, games: List[Game]):
        """Sets the games of this Player.


        :param games: The games of this Player.
        :type games: List[Game]
        """
        if games is None:
            raise ValueError("Invalid value for `games`, must not be `None`")  # noqa: E501

        self._games = games
