# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.champion import Champion  # noqa: F401,E501
from swagger_server.models.statistic import Statistic  # noqa: F401,E501
from swagger_server import util


class Game(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, kills: int=None, deaths: int=None, assists: int=None, champion: Champion=None, stats: List[Statistic]=None, relevance: float=None):  # noqa: E501
        """Game - a model defined in Swagger

        :param kills: The kills of this Game.  # noqa: E501
        :type kills: int
        :param deaths: The deaths of this Game.  # noqa: E501
        :type deaths: int
        :param assists: The assists of this Game.  # noqa: E501
        :type assists: int
        :param champion: The champion of this Game.  # noqa: E501
        :type champion: Champion
        :param stats: The stats of this Game.  # noqa: E501
        :type stats: List[Statistic]
        :param relevance: The relevance of this Game.  # noqa: E501
        :type relevance: float
        """
        self.swagger_types = {
            'kills': int,
            'deaths': int,
            'assists': int,
            'champion': Champion,
            'stats': List[Statistic],
            'relevance': float
        }

        self.attribute_map = {
            'kills': 'kills',
            'deaths': 'deaths',
            'assists': 'assists',
            'champion': 'champion',
            'stats': 'stats',
            'relevance': 'relevance'
        }
        self._kills = kills
        self._deaths = deaths
        self._assists = assists
        self._champion = champion
        self._stats = stats
        self._relevance = relevance

    @classmethod
    def from_dict(cls, dikt) -> 'Game':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Game of this Game.  # noqa: E501
        :rtype: Game
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kills(self) -> int:
        """Gets the kills of this Game.


        :return: The kills of this Game.
        :rtype: int
        """
        return self._kills

    @kills.setter
    def kills(self, kills: int):
        """Sets the kills of this Game.


        :param kills: The kills of this Game.
        :type kills: int
        """
        if kills is None:
            raise ValueError("Invalid value for `kills`, must not be `None`")  # noqa: E501

        self._kills = kills

    @property
    def deaths(self) -> int:
        """Gets the deaths of this Game.


        :return: The deaths of this Game.
        :rtype: int
        """
        return self._deaths

    @deaths.setter
    def deaths(self, deaths: int):
        """Sets the deaths of this Game.


        :param deaths: The deaths of this Game.
        :type deaths: int
        """
        if deaths is None:
            raise ValueError("Invalid value for `deaths`, must not be `None`")  # noqa: E501

        self._deaths = deaths

    @property
    def assists(self) -> int:
        """Gets the assists of this Game.


        :return: The assists of this Game.
        :rtype: int
        """
        return self._assists

    @assists.setter
    def assists(self, assists: int):
        """Sets the assists of this Game.


        :param assists: The assists of this Game.
        :type assists: int
        """
        if assists is None:
            raise ValueError("Invalid value for `assists`, must not be `None`")  # noqa: E501

        self._assists = assists

    @property
    def champion(self) -> Champion:
        """Gets the champion of this Game.


        :return: The champion of this Game.
        :rtype: Champion
        """
        return self._champion

    @champion.setter
    def champion(self, champion: Champion):
        """Sets the champion of this Game.


        :param champion: The champion of this Game.
        :type champion: Champion
        """
        if champion is None:
            raise ValueError("Invalid value for `champion`, must not be `None`")  # noqa: E501

        self._champion = champion

    @property
    def stats(self) -> List[Statistic]:
        """Gets the stats of this Game.


        :return: The stats of this Game.
        :rtype: List[Statistic]
        """
        return self._stats

    @stats.setter
    def stats(self, stats: List[Statistic]):
        """Sets the stats of this Game.


        :param stats: The stats of this Game.
        :type stats: List[Statistic]
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")  # noqa: E501

        self._stats = stats

    @property
    def relevance(self) -> float:
        """Gets the relevance of this Game.


        :return: The relevance of this Game.
        :rtype: float
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance: float):
        """Sets the relevance of this Game.


        :param relevance: The relevance of this Game.
        :type relevance: float
        """
        if relevance is None:
            raise ValueError("Invalid value for `relevance`, must not be `None`")  # noqa: E501

        self._relevance = relevance
